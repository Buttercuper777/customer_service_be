// <auto-generated />
using System;
using CustomersService.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CustomersService.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CustomersService.Core.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LeaseContractImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Tin")
                        .HasColumnType("text");

                    b.Property<string>("TinImagePath")
                        .HasColumnType("text");

                    b.Property<string>("UsrImagePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Entrepreneur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Epsrn")
                        .HasColumnType("text");

                    b.Property<string>("EpsrnImagePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Entrepreneurs");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Requisites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeOfBank")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Requisites");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Society", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Psrn")
                        .HasColumnType("text");

                    b.Property<string>("PsrnImagePath")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Societies");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Entrepreneur", b =>
                {
                    b.HasOne("CustomersService.Core.Models.Customer", "Customer")
                        .WithOne("Entrepreneur")
                        .HasForeignKey("CustomersService.Core.Models.Entrepreneur", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Requisites", b =>
                {
                    b.HasOne("CustomersService.Core.Models.Customer", "Customer")
                        .WithMany("Requisites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Society", b =>
                {
                    b.HasOne("CustomersService.Core.Models.Customer", "Customer")
                        .WithOne("Society")
                        .HasForeignKey("CustomersService.Core.Models.Society", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomersService.Core.Models.Customer", b =>
                {
                    b.Navigation("Entrepreneur");

                    b.Navigation("Requisites");

                    b.Navigation("Society");
                });
#pragma warning restore 612, 618
        }
    }
}
